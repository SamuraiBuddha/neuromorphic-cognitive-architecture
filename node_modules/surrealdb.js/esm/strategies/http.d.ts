import { PreparedQuery } from "../index.js";
import { SurrealHTTP } from "../library/SurrealHTTP.js";
import { type ActionResult, AnyAuth, type Connection, ConnectionOptions, HTTPConstructorOptions, type MapQueryResult, type RawQueryResult, ScopeAuth, Token, UseOptions } from "../types.js";
export declare class HTTPStrategy<TFetcher = typeof fetch> implements Connection {
    protected http?: SurrealHTTP<TFetcher>;
    ready: Promise<void>;
    private resolveReady;
    private fetch;
    strategy: "ws" | "http";
    /**
     * Establish a socket connection to the database
     * @param connection - Connection details
     */
    constructor(opts?: HTTPConstructorOptions<TFetcher>);
    /**
     * Establish a socket connection to the database
     * @param connection - Connection details
     */
    connect(url: string, opts?: ConnectionOptions): Promise<void>;
    /**
     * Disconnect the socket to the database
     */
    close(): void;
    /**
     * Check if connection is ready
     */
    wait(): Promise<void>;
    /**
     * Get status of the socket connection
     */
    get status(): Promise<unknown>;
    /**
     * Ping SurrealDB instance
     */
    ping(): Promise<void>;
    /**
     * Switch to a specific namespace and database.
     * @param database - Switches to a specific namespace.
     * @param db - Switches to a specific database.
     */
    use(opt: Partial<UseOptions>): void;
    /**
     * Signs up to a specific authentication scope.
     * @param vars - Variables used in a signup query.
     * @return The authentication token.
     */
    signup(vars: ScopeAuth): Promise<string>;
    /**
     * Signs in to a specific authentication scope.
     * @param vars - Variables used in a signin query.
     * @return The authentication token, unless signed in as root.
     */
    signin(vars: AnyAuth): Promise<string>;
    /**
     * Authenticates the current connection with a JWT token.
     * @param token - The JWT authentication token.
     */
    authenticate(token: Token): boolean;
    /**
     * Invalidates the authentication for the current connection.
     */
    invalidate(): void;
    /**
     * Runs a set of SurrealQL statements against the database.
     * @param query - Specifies the SurrealQL statements.
     * @param bindings - Assigns variables which can be used in the query.
     */
    query<T extends RawQueryResult[]>(query: string | PreparedQuery, bindings?: Record<string, unknown>): Promise<T>;
    /**
     * Runs a set of SurrealQL statements against the database.
     * @param query - Specifies the SurrealQL statements.
     * @param bindings - Assigns variables which can be used in the query.
     */
    query_raw<T extends RawQueryResult[]>(query: string | PreparedQuery, bindings?: Record<string, unknown>): Promise<MapQueryResult<T>>;
    /**
     * Selects all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    select<T extends Record<string, unknown>>(thing: string): Promise<ActionResult<T>[]>;
    /**
     * Creates a record in the database.
     * @param thing - The table name or the specific record ID to create.
     * @param data - The document / record data to insert.
     */
    create<T extends Record<string, unknown>, U extends Record<string, unknown> = T>(thing: string, data?: U): Promise<ActionResult<T, U>[]>;
    /**
     * Updates all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function replaces the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to update.
     * @param data - The document / record data to insert.
     */
    update<T extends Record<string, unknown>, U extends Record<string, unknown> = T>(thing: string, data?: U): Promise<ActionResult<T, U>[]>;
    /**
     * Modifies all records in a table, or a specific record, in the database.
     *
     * ***NOTE: This function merges the current document / record data with the specified data.***
     * @param thing - The table name or the specific record ID to change.
     * @param data - The document / record data to insert.
     */
    merge<T extends Record<string, unknown>, U extends Record<string, unknown> = Partial<T>>(thing: string, data?: U): Promise<ActionResult<T, U>[]>;
    /**
     * Deletes all records in a table, or a specific record, from the database.
     * @param thing - The table name or a record ID to select.
     */
    delete<T extends Record<string, unknown> = Record<string, unknown>>(thing: string): Promise<ActionResult<T>[]>;
    protected get request(): <T = unknown>(path: string, options?: {
        method?: "DELETE" | "GET" | "POST" | "PUT" | "PATCH" | undefined;
        plainBody?: boolean | undefined;
        body?: string | Record<string, unknown> | undefined;
        searchParams?: URLSearchParams | undefined;
    } | undefined) => Promise<T>;
    /**
     * Reset the ready mechanism.
     */
    private resetReady;
    private modifyThing;
}
