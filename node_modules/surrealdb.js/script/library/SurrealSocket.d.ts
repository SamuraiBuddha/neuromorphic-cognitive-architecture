import { type LiveQueryResponse, type RawSocketLiveQueryNotification, type Result, type StatusHooks, WebsocketStatus } from "../types.js";
export declare class SurrealSocket {
    private url;
    private readonly hooks;
    private ws?;
    private status;
    private queue;
    private liveQueue;
    private unprocessedLiveResponses;
    ready?: Promise<void>;
    closed?: Promise<void>;
    private resolveClosed?;
    socketClosureReason: Record<number, string>;
    constructor({ url, onConnect, onClose, onError, }: {
        url: string;
    } & StatusHooks);
    open(): Promise<void>;
    send(method: string, params: unknown[], callback: (data: Result) => unknown): Promise<void>;
    listenLive(queryUuid: string, callback: (data: LiveQueryResponse) => unknown): Promise<void>;
    kill(queryUuid: string): Promise<void>;
    private handleLiveBatch;
    close(reason: keyof typeof this.socketClosureReason): Promise<void>;
    get connectionStatus(): WebsocketStatus;
    static isLiveNotification(message: Record<string, unknown>): message is RawSocketLiveQueryNotification;
}
